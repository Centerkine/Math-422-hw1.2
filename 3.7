import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt

# Generate financial data
np.random.seed(42)

# Generate random dates
dates = pd.date_range(start='2022-01-01', end='2022-12-31', freq='B')

# Generate financial data
data = pd.DataFrame({
    'Date': dates,
    'Open': np.random.uniform(100, 200, len(dates)),
    'High': np.random.uniform(200, 300, len(dates)),
    'Low': np.random.uniform(50, 150, len(dates)),
    'Volume': np.random.randint(1000, 5000, len(dates)),
    'Close': np.random.uniform(100, 200, len(dates)),
})

data['Day'] = data['Date'].dt.day
data['Month'] = data['Date'].dt.month
data['Year'] = data['Date'].dt.year

# Define features and target variable
features = ['Open', 'High', 'Low', 'Volume', 'Day', 'Month', 'Year']
target = 'Close'

X = data[features]
y = data[target]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Train the model
model.fit(X_train, y_train)

# Make predictions on the test set
predictions = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, predictions)
print(f'Mean Squared Error: {mse}')

# Plot actual vs. predicted values
plt.figure(figsize=(10, 6))
plt.plot(y_test.index, y_test.values, label='Actual Close Price', color='blue')
plt.plot(y_test.index, predictions, label='Predicted Close Price', color='red')
plt.title('Actual vs. Predicted Close Prices')
plt.xlabel('Date')
plt.ylabel('Close Price')
plt.legend()
plt.show()
